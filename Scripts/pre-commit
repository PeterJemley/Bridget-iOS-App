#
# --- PRE-COMMIT HOOK DISABLED ---
#
# All lines below are commented out to disable the hook.
#
#!/bin/sh

RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

fail() {
  echo "${RED}❌ $1${NC}"
  exit 1
}

warn() {
  echo "${YELLOW}⚠️  $1${NC}"
}

# 1. SwiftLint
if command -v swiftlint >/dev/null 2>&1; then
  echo "Running SwiftLint..."
  swiftlint lint --quiet || fail "SwiftLint found issues. Please fix them before committing."
else
  warn "SwiftLint not installed. Skipping lint check."
fi

# 2. SwiftFormat
if command -v swiftformat >/dev/null 2>&1; then
  echo "Running SwiftFormat..."
  swiftformat . || fail "SwiftFormat found issues. Please fix them before committing."
else
  warn "SwiftFormat not installed. Skipping format check."
fi

# 3. Check for TODO/FIXME
if git diff --cached | grep -iE 'TODO|FIXME'; then
  fail "Commit contains TODO or FIXME comments. Please resolve or remove them."
fi

# 4. Check for merge conflict markers
if git diff --cached | grep -E '<<<<<<<|=======|>>>>>>>|\|\|\|\|\|\|\|'; then
  fail "Commit contains merge conflict markers. Please resolve them."
fi

# 5. Check for debug print statements in Swift files
if git diff --cached --name-only | grep -E '\.swift$' | xargs grep -E 'print\(|NSLog\(' --color=never; then
  fail "Commit contains debug print statements (print/NSLog). Please remove them."
fi

# 6. Prevent large files from being committed (500 KB default)
maxsize=500000
for file in $(git diff --cached --name-only); do
  if [ -f "$file" ] && [ $(stat -f%z "$file") -gt $maxsize ]; then
    fail "$file is larger than 500 KB. Large files should not be committed."
  fi
  # Example: allow up to 2 MB for PDFs
  if echo "$file" | grep -qE '\.pdf$'; then
    if [ $(stat -f%z "$file") -gt 2000000 ]; then
      fail "$file is larger than 2 MB (PDF limit)."
    fi
  fi
  # Example: allow up to 500 KB for PNGs
  if echo "$file" | grep -qE '\.png$'; then
    if [ $(stat -f%z "$file") -gt 500000 ]; then
      fail "$file is larger than 500 KB (PNG limit)."
    fi
  fi
  # Add more file type rules as needed
fi

# 7. Validate Plist or JSON syntax
for file in $(git diff --cached --name-only | grep -E '\.plist$|\.json$'); do
  if echo "$file" | grep -qE '\.plist$'; then
    plutil -lint "$file" || fail "$file contains invalid plist syntax."
  elif echo "$file" | grep -qE '\.json$'; then
    python3 -m json.tool < "$file" > /dev/null || fail "$file contains invalid JSON syntax."
  fi
  # Add YAML linting if needed
  # if echo "$file" | grep -qE '\.ya?ml$'; then
  #   yq e . "$file" > /dev/null || fail "$file contains invalid YAML syntax."
  # fi
fi

# 8. Enforce file permissions for scripts
for file in $(git diff --cached --name-only | grep '^Scripts/'); do
  if [ -f "$file" ] && [ ! -x "$file" ]; then
    fail "$file in Scripts/ should be executable."
  fi
  # Optionally, check that no source file is executable
  # if echo "$file" | grep -qE '\.swift$' && [ -x "$file" ]; then
  #   fail "$file should not be executable."
  # fi
  # Optionally, check for license headers
  # if ! grep -q 'Copyright' "$file"; then
  #   warn "$file is missing a license header."
  # fi
fi

echo "${GREEN}All pre-commit checks passed!${NC}"
exit 0 